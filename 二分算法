二分查找函数：
写一个函数BinarySearch,在包含size个元素的、从小到大排序的int数组a里查找元素p，如果找到，则返回元素下标，如果找不到，则返回-1，要求复杂度O(logn)
int BinarySearch(int a[],int size,int p){
	int L = 0;//查找区间左端点
	int R = size -1;//查找区间的右端点
	while(L <= R){
		int mid = L+(R+L)/2;//取查找区间正中元素的下标
		if(p == a[mid]){
			return mid;
		}else if(p > a[mid]){
			L = mid + 1;//设置新的查找区间的左端点
		}else{
			R = mid - 1;//设置新的查找区间的右端点
		}
	}
	return -1;
}//复杂度o(log(n))

写一个函数LowpowerBound，在包含size个元素的、从小到大排序的int数组a里查找比给定整数p小的，下标最大的元素。找到则返回其下标，找不到则返回-1
int LowpowerBound(int a[],int size,int p)//复杂度o(logn){
	int L = 0;//查找区间的左端点
	int R = size - 1；//查找区间的右端点
	int lastPos = -1；//到目前为止找到的最优解
	while(L <= R){
		int mid = L+(R-L)/2;//取查找区间正中元素的下标
		if(a[mid] >= p){
			R = mid - 1;
		}else{
			lastPos = mid;
			L = mid + 1;
		}
	}
	return lastPos;
}

二分算法应用：
输入n(n <= 100000)个整数，找出其中的两个数，它们之和等于整数m(假定肯定有解)。题中所有整数都能用int表示
1.将数组排序，复杂度是o(n*logn)
2.对数组中的每个元素a[i],在数组中二分查找m-a[i],看能否找到。复杂度logn，最坏要查找n-2次，所以查找这部分的复杂度也是o(n*logn)

二分法求方程的根
求下面方程的一个根：f(x)=x^3-5x^2+10x-80=0若求出的根是a，则要求|f(a)|<=10^-6
(在定义区间上为单调函数)
double EPS = 1E-6;
double f(double x){
	return x*x*x -5*x*x +10*x - 80;
}
int main(){
	double root, x1 = 0,x2 = 100,y;
	root = x1+(x2-x1)/2;
	int triedTimes = 1;//记录一共尝试多少次
	y = f(root);
	while(fabs(y) >EPS){
		if(y > 0) x2 = root;
		else 	  x1 = root;
		root = x1+(x2 -x1)/2;
		y = f(root);
		triedTime++;
	}
	printf("%.0f\n",root);
	printf("%d",triedTime);
	return 0;
}


农夫John建造了一座很长的畜栏，它包括N(2<=N<=100000)个隔间，这些小隔间的位置为x0...xn-1(0<=xi<=1000000000,均为整数，各不相同)。John的c(2<=c<=N)头牛每头分到一个隔间。牛都希望互相离得远省的相互打扰。怎样才能使任意两头牛之间的最小距离尽可能的大，这个最大的最小距离是多少呢？

先得到排序后的隔间坐标x0,...xn-1在[L,R]内用二分法尝试最大最近距离D=(L+R)/2(L,R初值为[1,1000000000/c])
若D可行，则记住该D，然后在新[L,R]中继续尝试(L=D+1)
若D不可行，则在新[L,R]中继续尝试(R=D-1)


例题：求排列的逆序数
一个排列含有逆序数的个数称为这个排列的逆序数。例如排列263451含有8个逆序(2,1),(6,3),(6,5),(6,1),(3,1),(4,1),(5,1),(6,4)，因此该排列的逆序数就是8.
现在给定1,2,...,n的一个排列，求它的逆序数。


分治：
1.将数组分成两半，分别求出左半边的逆序数和右半边的逆序数
2.再算有多少逆序数是由左半边取一个数和右半边取一个数构成(要求O(n)实现)

总结：
由归并排序改进得到，加上计算逆序数的步骤

