城堡问题：
编写一个程序，计算城堡一共有多少房间，最大的房间有多大。城堡被分割成m*n(m,n<=50),每个方块可以有0~4面墙。

解题思路：
把方块看作是节点，相邻的两个方块之间如果没有墙，则在方块之间连一条边，这样城堡就能转换成一个图。

求房间的个数，实际上就是在求图中有多少个极大连通子图

一个连通子图，往里头加任何一个图里的其他点，就会变得不连通，那么这个连通子图就是极大连通子图。

对每一个房间，深搜，从而给这个房间能够到达的所有位置染色。最后统计一共用了几种颜色，以及每种颜色的数量。

intR,C;//行列数
int rooms[60][60];
int color[60][60];//方块是否染色过
int maxRoomArea = 0,roomNUm = 0;
int roomAera;
void Dfs(int i,int k){
	if(color[i][k])
		return;
	++ roomArea;
	color [i][k] = roomNum;
	if((rooms[i][k] & 1) == 0) Dfs(i,k-1);//向西走
	if((rooms[i][k] & 2) == 0) Dfs(i-1,k);//向北
	if((rooms[i][k] & 4) == 0) Dfs(i,k+1);//向东
	if((rooms[i][k] & 8) == 0) Dfs(i+1,k);//向南
}
int main(){
	cin >> R >> C;
	for(int i = 1;i <= R;++i){
		for(int k = 1;k <= c;++k){
			cin >> rooms[i][k];
		}
	}
	memset(color,0,sizeof(color));
	for(int i = 1;i <= R;++i){
		for(int k = 1;k <= c;++k){
			if(!color[i][k]){
				++roomNum;
				roomArea = 0;
				Dfs(i,k);
				maxRoomArea = max(roomArea,maxRoomArea);
			}
		}
	}
	cout << roomNum << endl;
	cout << maxRoomArea << endl;
}


eg：踩方格

有一个方格矩阵，矩阵边界在无穷远处，我们做如下假设：
a.每走一步时，只能从当前方格移动一格，走到某个相邻的方格上
b.走过的格子立即塌陷无法再走第二次
c.只能向北，东，西三个方向走
请问：如果允许再方格矩阵上走n步（n <= 20）,共有多少种不同的方案。两种走法只要有一步不一样，即被认为是不同的方案。

思路：
递归
从(i,j)出发，走n步的方案数，等于以下三项之和：
	从(i+1,j)出发，走n-1步的方案数。前提：(i+1,j)还没走过
	从(i,j+1)出发，走n-1步的方案数。前提：(i,j+1)还没走过
	从(i,j-1)出发，走n-1步的方案数。前提：(i,j-1)还没走过


int visited[30][50]
int ways (int i,int j,int n){
	if(n == 0)
		return 1;
	visited[i][j] = 1;
	int num = 0;//所有走法之和
	if(!visited[i][j-1])//向西走
		num += ways(i,j-1,n-1);
	if(!visited[i][j+1])//向东走
		num += ways(i,j+1,n-1);
	if(!visited[i+1][j])//向北走  
		num += ways(i+1,j,n-1);
	visited[i][j] = 0;
	return num;
}



N个城市，编号为1到N。城市间有R条单向道路。
每条道路连接城市，有长度和过路费两个属性。Bob只有K块钱，他想从城市1走到城市N。问最短需要多长的路。如果到不了N，输出-1

2<=N<=100
0<=K<=10000
1<=R<=10000
每条路的长度L，1<= L <= 100
每条路的过路费T，0 <= T <= 100

解题思路：
从城市1开始深度优先遍历整个图，找到所有能过到达N的走法，选择一个最优的。

using namespace std;
int K,N,R
struct road{
	int d,L,t;
};
vector< vector< Roads> >G(110);

int minLen;
int totalLen;
int totalCost;
int Visited[110];

void dfs(int s){
	if(s == N){
		minLen = min(minLen,totalLen);
		return ;
	}
	for(int i = 0;i < G[s].size();++i){
		Road r = G[s][i];
		if(totalCost + r.t > K)
			continue;
		if(!visited[r.d]){
			totalLen += r.L;
			totalCost += r.t;
			visited[r.d] = 1;
			dfs(r.d);
			visited[r.d] = 0;
			totalLen -= r.L;
			totalCost -= r.t;
		}
	}
}

int main(){
	cin >> K >>N >>R;
	for(int i = 0;i < R;++i){
		int s;
		Road r;
		cin >> s >> r.d >> r.L >>r.t;
		if(s != r.d){
			G[s].push_back(r);
		}
	}
	memest(visited,0,sizeof(visited));
	totalLen = 0;
	minLen = 1 << 30;
	totalCost = 0;
	visited[1] = 1;
	dfs(1);
	if(minLen < 1 < 30){
		cout << minLen <<endl;
	}
	else{
		cout <<"-1"<<endl;
	}
	return 0;
}

优化：
最优性剪枝：
1.如果当前已经找到的最优路径长度为L，那么在据徐搜索的过程中，总长度已经大于等于L的走法，就可以直接放弃，不用走到底了。
保存中间计算结果用于最优性剪枝：
用mid[k][m]表示：走到城市k时总过路费为m的条件下，最优路径的长度。若在后续的搜索中，在此走到k时，如果总路费恰好为m，且此时的路径长度已经超过mid[k][m],则不必再走下去了。

using namespace std;
int K,N,R
struct road{
	int d,L,t;
};
vector< vector< Roads> >G(110);
int minL[110][10010];

int minLen;//当前已找到的最优路径
int totalLen;
int totalCost;
int Visited[110];

void dfs(int s){
	if(s == N){
		minLen = min(minLen,totalLen);
		return ;
	}
	for(int i = 0;i < G[s].size();++i){
		Road r = G[s][i];
		if(totalCost + r.t > K)
			continue;
		if(!visited[r.d]){
			if(totalLen +r.l >= minLen)
				continue;
			if(totalLen + r.L >= minL[r.d][totalCost + r.t])
				continue;
			minL[r.d][totalCost+r.t] = totalLen +r.L;
			totalLen += r.L;
			totalCost += r.t;
			visited[r.d] = 1;
			dfs(r.d);
			visited[r.d] = 0;
			totalLen -= r.L;
			totalCost -= r.t;
		}
	}
}

int main(){
	cin >> K >>N >>R;
	for(int i = 0;i < R;++i){
		int s;
		Road r;
		cin >> s >> r.d >> r.L >>r.t;
		if(s != r.d){
			G[s].push_back(r);
		}
	}
	memest(visited,0,sizeof(visited));
	totalLen = 0;
	minLen = 1 << 30;
	totalCost = 0;
	visited[1] = 1;

	for(int i = 0;i < 110;++i){
		for(int j = 0;j < 10010; ++j){
			minL[i][j] = 1 << 30;
		}
	}
	dfs(1);
	if(minLen < (1 << 30)){
		cout << minLen <<endl;
	}
	else{
		cout <<"-1"<<endl;
	}
	return 0;
}

eg.生日蛋糕

要制作一个体积为NT的M层生日蛋糕，每层都是一个圆柱体。
设从下往上数第i(1 <= i <=M)层蛋糕是半径为Ri，高度为Hi的圆柱。
当i < M 时，要求Ri >Ri+1且Hi >Hi+1。由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。
令Q= S П 请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。(除Q外，以上所有数据皆为正整数）

解题思路：

深度优先搜索，枚举什么？
	枚举每一层可能的高度和半径

如何确定搜索的范围
	底层蛋糕的最大可能半径和最大可能高度

搜索顺序，那些地方体现搜索顺序
	从底层网上搭蛋糕，而不是从顶层往下搭

如何剪枝

剪枝1：搭建过程中发现已搭建好的面积已经超过目前求得的最优表面积，或者预见到搭建完后的面积一定会超过目前最优表面积，则停止搭建（最优性剪枝）

剪枝2：搭建过程中预见到再往上搭，高度已经无法安排，或者半径已经无法安排，则停止搭建（可行性剪枝）

剪枝3：搭建过程中发现还没搭的那些层的体积，一定会超过还缺的体积，则停止搭建（可行性剪枝）

剪枝4：搭建过程中发现还没搭的那些层的体积，最大也到不了还缺的体积，则停止搭建（可行性剪枝）


void Dfs(int v,int n,int r,int h){
	//要用n层去凑体积v，最底层半径不能超过r，高度不能超过h
	//求出最小表面积minArea
	if(n == 0){
		if(v)return;
		else{minArea = min(minArea,area);return;}
	}
	if(v <= 0)
		return;
	for(int rr = r;rr >= n; --r){
		if(n == M)//底面积
			area = rr*rr;
		for(int hh = h;hh >= n;--hh){
			area += 2*rr*hh;
			Dfs(v-rr*rr*hh,n-1,rr-1,hh-1);
			area -= 2*rr*hh;
		}
	}
}
